require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe MriScansController do

  def mock_mri_scan(stubs={})
    @mock_mri_scan ||= mock_model(MriScan, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all mri_scans as @mri_scans" do
      MriScan.stub_chain(:search, :relation, :page) { [mock_mri_scan] }
      get :index
      assigns(:mri_scans).should eq([mock_mri_scan])
    end
  end

  describe "GET show" do
    it "assigns the requested mri_scan as @mri_scan" do
      MriScan.stub(:find).with("37") { mock_mri_scan }
      get :show, :id => "37"
      assigns(:mri_scan).should be(mock_mri_scan)
    end
  end

  describe "GET new" do
    it "assigns a new mri_scan as @mri_scan" do
      MriScan.stub(:new) { mock_mri_scan }
      get :new
      assigns(:mri_scan).should be(mock_mri_scan)
    end
  end

  describe "GET edit" do
    it "assigns the requested mri_scan as @mri_scan" do
      MriScan.stub(:find).with("37") { mock_mri_scan }
      get :edit, :id => "37"
      assigns(:mri_scan).should be(mock_mri_scan)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created mri_scan as @mri_scan" do
        MriScan.stub(:new).with({'these' => 'params'}) { mock_mri_scan(:save => true) }
        post :create, :mri_scan => {'these' => 'params'}
        assigns(:mri_scan).should be(mock_mri_scan)
      end

      it "redirects to the created mri_scan" do
        MriScan.stub(:new) { mock_mri_scan(:save => true) }
        post :create, :mri_scan => {}
        response.should redirect_to(mri_scan_url(mock_mri_scan))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved mri_scan as @mri_scan" do
        MriScan.stub(:new).with({'these' => 'params'}) { mock_mri_scan(:save => false) }
        post :create, :mri_scan => {'these' => 'params'}
        assigns(:mri_scan).should be(mock_mri_scan)
      end

      it "re-renders the 'new' template" do
        MriScan.stub(:new) { mock_mri_scan(:save => false) }
        post :create, :mri_scan => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested mri_scan" do
        MriScan.stub(:find).with("37") { mock_mri_scan }
        mock_mri_scan.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :mri_scan => {'these' => 'params'}
      end

      it "assigns the requested mri_scan as @mri_scan" do
        MriScan.stub(:find) { mock_mri_scan(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:mri_scan).should be(mock_mri_scan)
      end

      it "redirects to the mri_scan" do
        MriScan.stub(:find) { mock_mri_scan(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(mri_scan_url(mock_mri_scan))
      end
    end

    describe "with invalid params" do
      it "assigns the mri_scan as @mri_scan" do
        MriScan.stub(:find) { mock_mri_scan(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:mri_scan).should be(mock_mri_scan)
      end

      it "re-renders the 'edit' template" do
        MriScan.stub(:find) { mock_mri_scan(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested mri_scan" do
      MriScan.stub(:find).with("37") { mock_mri_scan }
      mock_mri_scan.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the mri_scans list" do
      MriScan.stub(:find) { mock_mri_scan }
      delete :destroy, :id => "1"
      response.should redirect_to(mri_scans_url)
    end
  end

end
