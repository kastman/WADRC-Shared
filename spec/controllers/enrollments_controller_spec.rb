require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe EnrollmentsController do

  def mock_enrollment(stubs={})
    @mock_enrollment ||= mock_model(Enrollment, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all enrollments as @enrollments" do
      Enrollment.stub_chain(:search, :relation, :page) { [mock_enrollment] }
      get :index
      assigns(:enrollments).should eq([mock_enrollment])
    end
  end

  describe "GET show" do
    it "assigns the requested enrollment as @enrollment" do
      Enrollment.stub(:find).with("37") { mock_enrollment }
      get :show, :id => "37"
      assigns(:enrollment).should be(mock_enrollment)
    end
  end

  describe "GET new" do
    it "assigns a new enrollment as @enrollment" do
      Enrollment.stub(:new) { mock_enrollment }
      get :new
      assigns(:enrollment).should be(mock_enrollment)
    end
  end

  describe "GET edit" do
    it "assigns the requested enrollment as @enrollment" do
      Enrollment.stub(:find).with("37") { mock_enrollment }
      get :edit, :id => "37"
      assigns(:enrollment).should be(mock_enrollment)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created enrollment as @enrollment" do
        Enrollment.stub(:new).with({'these' => 'params'}) { mock_enrollment(:save => true) }
        post :create, :enrollment => {'these' => 'params'}
        assigns(:enrollment).should be(mock_enrollment)
      end

      it "redirects to the created enrollment" do
        Enrollment.stub(:new) { mock_enrollment(:save => true) }
        post :create, :enrollment => {}
        response.should redirect_to(enrollment_url(mock_enrollment))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved enrollment as @enrollment" do
        Enrollment.stub(:new).with({'these' => 'params'}) { mock_enrollment(:save => false) }
        post :create, :enrollment => {'these' => 'params'}
        assigns(:enrollment).should be(mock_enrollment)
      end

      it "re-renders the 'new' template" do
        Enrollment.stub(:new) { mock_enrollment(:save => false) }
        post :create, :enrollment => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested enrollment" do
        Enrollment.stub(:find).with("37") { mock_enrollment }
        mock_enrollment.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :enrollment => {'these' => 'params'}
      end

      it "assigns the requested enrollment as @enrollment" do
        Enrollment.stub(:find) { mock_enrollment(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:enrollment).should be(mock_enrollment)
      end

      it "redirects to the enrollment" do
        Enrollment.stub(:find) { mock_enrollment(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(enrollment_url(mock_enrollment))
      end
    end

    describe "with invalid params" do
      it "assigns the enrollment as @enrollment" do
        Enrollment.stub(:find) { mock_enrollment(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:enrollment).should be(mock_enrollment)
      end

      it "re-renders the 'edit' template" do
        Enrollment.stub(:find) { mock_enrollment(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested enrollment" do
      Enrollment.stub(:find).with("37") { mock_enrollment }
      mock_enrollment.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the enrollments list" do
      Enrollment.stub(:find) { mock_enrollment }
      delete :destroy, :id => "1"
      response.should redirect_to(enrollments_url)
    end
  end

end
