require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe ScanTasksController do

  def mock_scan_task(stubs={})
    @mock_scan_task ||= mock_model(ScanTask, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all scan_tasks as @scan_tasks" do
      ScanTask.stub_chain(:search, :relation, :page) { [mock_scan_task] }
      get :index
      assigns(:scan_tasks).should eq([mock_scan_task])
    end
  end

  describe "GET show" do
    it "assigns the requested scan_task as @scan_task" do
      ScanTask.stub(:find).with("37") { mock_scan_task }
      get :show, :id => "37"
      assigns(:scan_task).should be(mock_scan_task)
    end
  end

  describe "GET new" do
    it "assigns a new scan_task as @scan_task" do
      ScanTask.stub(:new) { mock_scan_task }
      get :new
      assigns(:scan_task).should be(mock_scan_task)
    end
  end

  describe "GET edit" do
    it "assigns the requested scan_task as @scan_task" do
      ScanTask.stub(:find).with("37") { mock_scan_task }
      get :edit, :id => "37"
      assigns(:scan_task).should be(mock_scan_task)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created scan_task as @scan_task" do
        ScanTask.stub(:new).with({'these' => 'params'}) { mock_scan_task(:save => true) }
        post :create, :scan_task => {'these' => 'params'}
        assigns(:scan_task).should be(mock_scan_task)
      end

      it "redirects to the created scan_task" do
        ScanTask.stub(:new) { mock_scan_task(:save => true) }
        post :create, :scan_task => {}
        response.should redirect_to(scan_task_url(mock_scan_task))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved scan_task as @scan_task" do
        ScanTask.stub(:new).with({'these' => 'params'}) { mock_scan_task(:save => false) }
        post :create, :scan_task => {'these' => 'params'}
        assigns(:scan_task).should be(mock_scan_task)
      end

      it "re-renders the 'new' template" do
        ScanTask.stub(:new) { mock_scan_task(:save => false) }
        post :create, :scan_task => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested scan_task" do
        ScanTask.stub(:find).with("37") { mock_scan_task }
        mock_scan_task.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :scan_task => {'these' => 'params'}
      end

      it "assigns the requested scan_task as @scan_task" do
        ScanTask.stub(:find) { mock_scan_task(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:scan_task).should be(mock_scan_task)
      end

      it "redirects to the scan_task" do
        ScanTask.stub(:find) { mock_scan_task(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(scan_task_url(mock_scan_task))
      end
    end

    describe "with invalid params" do
      it "assigns the scan_task as @scan_task" do
        ScanTask.stub(:find) { mock_scan_task(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:scan_task).should be(mock_scan_task)
      end

      it "re-renders the 'edit' template" do
        ScanTask.stub(:find) { mock_scan_task(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested scan_task" do
      ScanTask.stub(:find).with("37") { mock_scan_task }
      mock_scan_task.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the scan_tasks list" do
      ScanTask.stub(:find) { mock_scan_task }
      delete :destroy, :id => "1"
      response.should redirect_to(scan_tasks_url)
    end
  end

end
